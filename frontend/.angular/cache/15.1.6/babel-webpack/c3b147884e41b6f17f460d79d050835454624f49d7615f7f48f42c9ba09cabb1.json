{"ast":null,"code":"import { filter, take } from 'rxjs/operators';\nexport function passwordMatchValidator(control) {\n  const password = control.get('password');\n  const confirmPassword = control.get('confirmPassword');\n  console.log(\"Password: \", password);\n  console.log(\"Confirm Password: \", confirmPassword);\n  if (!password || !confirmPassword) {\n    // if the form controls are not yet initialized, return null\n    return null;\n  }\n  password.valueChanges.pipe(filter(() => confirmPassword.value !== ''), take(1)).subscribe(() => confirmPassword.updateValueAndValidity());\n  confirmPassword.valueChanges.pipe(filter(() => password.value !== ''), take(1)).subscribe(() => password.updateValueAndValidity());\n  if (password.value !== confirmPassword.value) {\n    return {\n      passwordMismatch: true\n    };\n  }\n  return null;\n}","map":{"version":3,"mappings":"AACA,SAASA,MAAM,EAAEC,IAAI,QAAQ,gBAAgB;AAE7C,OAAM,SAAUC,sBAAsB,CAACC,OAAwB;EAC7D,MAAMC,QAAQ,GAAGD,OAAO,CAACE,GAAG,CAAC,UAAU,CAAC;EACxC,MAAMC,eAAe,GAAGH,OAAO,CAACE,GAAG,CAAC,iBAAiB,CAAC;EAEtDE,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEJ,QAAQ,CAAC;EACnCG,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEF,eAAe,CAAC;EAClD,IAAI,CAACF,QAAQ,IAAI,CAACE,eAAe,EAAE;IACjC;IACA,OAAO,IAAI;;EAGbF,QAAQ,CAACK,YAAY,CAClBC,IAAI,CACHV,MAAM,CAAC,MAAMM,eAAe,CAACK,KAAK,KAAK,EAAE,CAAC,EAC1CV,IAAI,CAAC,CAAC,CAAC,CACR,CACAW,SAAS,CAAC,MAAMN,eAAe,CAACO,sBAAsB,EAAE,CAAC;EAE5DP,eAAe,CAACG,YAAY,CACzBC,IAAI,CACHV,MAAM,CAAC,MAAMI,QAAQ,CAACO,KAAK,KAAK,EAAE,CAAC,EACnCV,IAAI,CAAC,CAAC,CAAC,CACR,CACAW,SAAS,CAAC,MAAMR,QAAQ,CAACS,sBAAsB,EAAE,CAAC;EAErD,IAAIT,QAAQ,CAACO,KAAK,KAAKL,eAAe,CAACK,KAAK,EAAE;IAC5C,OAAO;MAAEG,gBAAgB,EAAE;IAAI,CAAE;;EAGnC,OAAO,IAAI;AACb","names":["filter","take","passwordMatchValidator","control","password","get","confirmPassword","console","log","valueChanges","pipe","value","subscribe","updateValueAndValidity","passwordMismatch"],"sourceRoot":"","sources":["/Users/kleitionbendo/BankingApp/AngularBanking/src/app/customer-registration/password-match-validator.ts"],"sourcesContent":["import { AbstractControl, FormGroup } from '@angular/forms';\nimport { filter, take } from 'rxjs/operators';\n\nexport function passwordMatchValidator(control: AbstractControl) {\n  const password = control.get('password');\n  const confirmPassword = control.get('confirmPassword');\n\n  console.log(\"Password: \", password);\n  console.log(\"Confirm Password: \", confirmPassword);\n  if (!password || !confirmPassword) {\n    // if the form controls are not yet initialized, return null\n    return null;\n  }\n\n  password.valueChanges\n    .pipe(\n      filter(() => confirmPassword.value !== ''),\n      take(1)\n    )\n    .subscribe(() => confirmPassword.updateValueAndValidity());\n\n  confirmPassword.valueChanges\n    .pipe(\n      filter(() => password.value !== ''),\n      take(1)\n    )\n    .subscribe(() => password.updateValueAndValidity());\n  \n  if (password.value !== confirmPassword.value) {\n    return { passwordMismatch: true };\n  }\n\n  return null;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}